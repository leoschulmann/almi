/// Flutter icons Almi
/// Copyright (C) 2024 by original authors @ fluttericon.com, fontello.com
/// This font was generated by FlutterIcon.com, which is derived from Fontello.
///
/// To use this font, place it in your fonts/ directory and include the
/// following in your pubspec.yaml
///
/// flutter:
///   fonts:
///    - family:  Almi
///      fonts:
///       - asset: fonts/Almi.ttf
///
///
///
import 'package:ani_lo_medaber_ivrit/models/verb_info.dart';
import 'package:flutter/material.dart';

class FlutterIconAlmi {
  FlutterIconAlmi._();

  static const _kFontFam = 'Almi';
  static const String? _kFontPkg = null;

  static const IconData inf_f = IconData(0xe800, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData inf_o = IconData(0xe801, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData third_pl_f = IconData(0xe802, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData third_pl_o = IconData(0xe803, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData first_pl_f = IconData(0xe804, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData first_pl_o = IconData(0xe805, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData first_sing_f = IconData(0xe806, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData first_sing_o = IconData(0xe807, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData third_sing_masc_f = IconData(0xe808, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData third_sing_masc_o = IconData(0xe809, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData third_sing_fem_o = IconData(0xe80a, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData third_sing_fem_f = IconData(0xe80b, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData third_pl_masc_f = IconData(0xe80d, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData third_pl_masc_o = IconData(0xe80e, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData third_pl_fem_f = IconData(0xe80f, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData third_pl_fem_o = IconData(0xe810, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData sec_pl_fem_f = IconData(0xe811, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData sec_pl_fem_o = IconData(0xe812, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData sec_pl_masc_f = IconData(0xe813, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData sec_pl_masc_o = IconData(0xe814, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData sec_sing_fem_f = IconData(0xe815, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData sec_sing_fem_o = IconData(0xe816, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData sec_sing_masc_f = IconData(0xe817, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData sec_sing_masc_o = IconData(0xe818, fontFamily: _kFontFam, fontPackage: _kFontPkg);

  static Icon icon(
      {required Plurality plurality, required GrammaticalPerson person, required Brightness theme, Color? color}) {
    switch (plurality) {
      case Plurality.singular:
        switch (person) {
          case GrammaticalPerson.first:
            return switch (theme) {
              Brightness.dark => Icon(first_sing_f, color: color ??= Colors.white),
              Brightness.light => Icon(first_sing_o, color: color ??= Colors.black)
            };
          case GrammaticalPerson.second:
          case GrammaticalPerson.third:
          case GrammaticalPerson.none:
            throw ArgumentError("unsupported combination: $plurality and $person");
        }
      case Plurality.plural:
        switch (person) {
          case GrammaticalPerson.first:
            return switch (theme) {
              Brightness.dark => Icon(first_pl_f, color: color ??= Colors.white),
              Brightness.light => Icon(first_pl_o, color: color ??= Colors.black)
            };
          case GrammaticalPerson.third:
            return switch (theme) {
              Brightness.dark => Icon(third_pl_f, color: color ??= Colors.white),
              Brightness.light => Icon(third_pl_o, color: color ??= Colors.black)
            };
          case GrammaticalPerson.second:
          case GrammaticalPerson.none:
            throw ArgumentError("unsupported combination: $plurality and $person");
        }
      case Plurality.singularMasc:
        switch (person) {
          case GrammaticalPerson.none:
          case GrammaticalPerson.second:
            return switch (theme) {
              Brightness.dark => Icon(sec_sing_masc_f, color: color ??= Colors.white),
              Brightness.light => Icon(sec_sing_masc_o, color: color ??= Colors.black)
            };
          case GrammaticalPerson.third:
            return switch (theme) {
              Brightness.dark => Icon(third_sing_masc_f, color: color ??= Colors.white),
              Brightness.light => Icon(third_sing_masc_o, color: color ??= Colors.black)
            };
          case GrammaticalPerson.first:
            throw ArgumentError("unsupported combination: $plurality and $person");
        }
      case Plurality.singularFem:
        switch (person) {
          case GrammaticalPerson.none:
          case GrammaticalPerson.second:
            return switch (theme) {
              Brightness.dark => Icon(sec_sing_fem_f, color: color ??= Colors.white),
              Brightness.light => Icon(sec_sing_fem_o, color: color ??= Colors.black)
            };
          case GrammaticalPerson.third:
            return switch (theme) {
              Brightness.dark => Icon(third_sing_fem_f, color: color ??= Colors.white),
              Brightness.light => Icon(third_sing_fem_o, color: color ??= Colors.black)
            };
          case GrammaticalPerson.first:
            throw ArgumentError("unsupported combination: $plurality and $person");
        }
      case Plurality.pluralMasc:
        switch (person) {
          case GrammaticalPerson.none:
          case GrammaticalPerson.second:
            return switch (theme) {
              Brightness.dark => Icon(sec_pl_masc_f, color: color ??= Colors.white),
              Brightness.light => Icon(sec_pl_masc_o, color: color ??= Colors.black)
            };
          case GrammaticalPerson.third:
            return switch (theme) {
              Brightness.dark => Icon(third_pl_masc_f, color: color ??= Colors.white),
              Brightness.light => Icon(third_pl_masc_o, color: color ??= Colors.black)
            };
          case GrammaticalPerson.first:
            throw ArgumentError("unsupported combination: $plurality and $person");
        }
      case Plurality.pluralFem:
        switch (person) {
          case GrammaticalPerson.none:
          case GrammaticalPerson.second:
            return switch (theme) {
              Brightness.dark => Icon(sec_pl_fem_f, color: color ??= Colors.white),
              Brightness.light => Icon(sec_pl_fem_o, color: color ??= Colors.black)
            };
          case GrammaticalPerson.third:
            return switch (theme) {
              Brightness.dark => Icon(third_pl_fem_f, color: color ??= Colors.white),
              Brightness.light => Icon(third_pl_fem_o, color: color ??= Colors.black)
            };
          case GrammaticalPerson.first:
            throw ArgumentError("unsupported combination: $plurality and $person");
        }
      case Plurality.none:
        switch (person) {
          case GrammaticalPerson.none:
            return switch (theme) {
              Brightness.dark => Icon(inf_f, color: color ??= Colors.white),
              Brightness.light => Icon(inf_o, color: color ??= Colors.black)
            };
          case GrammaticalPerson.first:
          case GrammaticalPerson.second:
          case GrammaticalPerson.third:
            throw ArgumentError("unsupported combination: $plurality and $person");
        }
    }
  }
}
